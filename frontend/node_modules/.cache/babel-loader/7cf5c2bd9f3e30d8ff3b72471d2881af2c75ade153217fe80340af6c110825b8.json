{"ast":null,"code":"var _jsxFileName = \"/home/yves/Test/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Notification from '../components/Notification';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [notification, setNotification] = useState({\n    message: null,\n    type: null\n  });\n  const [error, setError] = useState(null);\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      // Check if token exists in local storage\n      const token = localStorage.getItem('token');\n      if (token) {\n        // Load user data - Version optimisée pour la production\n        const loadUser = async () => {\n          if (localStorage.token) {\n            setAuthToken(localStorage.token);\n          } else {\n            setLoading(false);\n            return; // Pas de token, pas besoin de charger l'utilisateur\n          }\n          try {\n            // Utiliser le chemin correct pour l'API\n            const endpoint = '/users/profile/';\n            console.log('URL du profil:', axios.defaults.baseURL + endpoint);\n            const res = await axios.get(endpoint);\n            setUser(res.data);\n            setIsAuthenticated(true);\n            setLoading(false);\n          } catch (err) {\n            console.error('Erreur de chargement utilisateur:', err);\n            localStorage.removeItem('token'); // Supprimer le token invalide\n            setAuthToken(null);\n            setUser(null);\n            setIsAuthenticated(false);\n            setLoading(false);\n          }\n        };\n        loadUser();\n      } else {\n        setLoading(false);\n      }\n    };\n    checkLoggedIn();\n  }, []);\n\n  // Set auth token for axios\n  const setAuthToken = token => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  };\n\n  // Register user - Version simplifiée\n  const register = async userData => {\n    try {\n      console.log('Tentative d\\'inscription avec:', userData);\n\n      // Endpoint d'inscription simplifié\n      // Éviter le doublon api/api en utilisant le chemin correct\n      const endpoint = '/users/register/';\n      console.log('URL d\\'inscription:', axios.defaults.baseURL + endpoint);\n      const res = await axios.post(endpoint, {\n        username: userData.username,\n        email: userData.email,\n        password: userData.password,\n        password2: userData.password2,\n        bio: userData.bio || ''\n      });\n      console.log('Réponse d\\'inscription:', res.data);\n\n      // Afficher une alerte simple de succès\n      alert('Inscription réussie! Vos données ont été enregistrées dans la base de données. Vous pouvez maintenant vous connecter.');\n\n      // Rediriger vers la page de connexion immédiatement\n      window.location.href = '/login';\n      return res.data;\n    } catch (err) {\n      var _err$response;\n      console.error('Erreur d\\'inscription:', err);\n\n      // Message d'erreur simplifié\n      let message = 'L\\'inscription a échoué. Vérifiez votre connexion internet.';\n      if ((_err$response = err.response) !== null && _err$response !== void 0 && _err$response.data) {\n        console.log('Données d\\'erreur:', err.response.data);\n        if (typeof err.response.data === 'object') {\n          // Simplifier le message d'erreur\n          const errorMessages = [];\n          for (const key in err.response.data) {\n            const value = err.response.data[key];\n            errorMessages.push(`${key}: ${Array.isArray(value) ? value.join(', ') : value}`);\n          }\n          message = errorMessages.join('\\n');\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n    }\n  };\n\n  // Login user - Version simplifiée\n  const login = async userData => {\n    try {\n      console.log('Tentative de connexion avec:', userData);\n\n      // Endpoint de connexion simplifié\n      // Éviter le doublon api/api en utilisant le chemin correct\n      const endpoint = '/token/';\n      console.log('URL de connexion:', axios.defaults.baseURL + endpoint);\n\n      // Essayer d'abord avec l'email\n      try {\n        console.log('Tentative de connexion avec email');\n        const res = await axios.post(endpoint, {\n          email: userData.email || userData.username,\n          password: userData.password\n        });\n        console.log('Connexion réussie avec email');\n        return res;\n      } catch (emailError) {\n        console.log('Échec de connexion avec email, tentative avec username');\n        // Si ça échoue, essayer avec le nom d'utilisateur\n        const res = await axios.post(endpoint, {\n          username: userData.email || userData.username,\n          password: userData.password\n        });\n        console.log('Connexion réussie avec username');\n        return res;\n      }\n      console.log('Réponse de connexion:', res.data);\n\n      // Sauvegarder le token dans le stockage local\n      localStorage.setItem('token', res.data.access);\n\n      // Configurer le token d'authentification pour les futures requêtes\n      setAuthToken(res.data.access);\n\n      // Charger les données de l'utilisateur\n      const profileEndpoint = '/api/users/profile/';\n      const userRes = await axios.get(profileEndpoint);\n\n      // Mettre à jour l'état avec les données de l'utilisateur\n      setUser(userRes.data);\n      setIsAuthenticated(true);\n\n      // Afficher une alerte simple de succès\n      alert('Connexion réussie! Vos données ont été chargées depuis la base de données.');\n\n      // Rediriger vers la page d'accueil immédiatement\n      window.location.href = '/';\n      return res.data;\n    } catch (err) {\n      var _err$response2;\n      console.error('Erreur de connexion:', err);\n\n      // Message d'erreur simplifié\n      let message = 'Échec de connexion. Vérifiez vos identifiants.';\n      if ((_err$response2 = err.response) !== null && _err$response2 !== void 0 && _err$response2.data) {\n        console.log('Données d\\'erreur:', err.response.data);\n        if (typeof err.response.data === 'object') {\n          if (err.response.data.detail) {\n            message = err.response.data.detail;\n          } else {\n            // Simplifier le message d'erreur\n            const errorMessages = [];\n            for (const key in err.response.data) {\n              const value = err.response.data[key];\n              errorMessages.push(`${key}: ${Array.isArray(value) ? value.join(', ') : value}`);\n            }\n            message = errorMessages.join('\\n');\n          }\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n\n      // Afficher l'erreur avec une alerte simple\n      alert('Erreur: ' + message);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    // Remove token from local storage\n    localStorage.removeItem('token');\n\n    // Remove auth token from headers\n    setAuthToken(null);\n\n    // Reset state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Update user profile - Version optimisée pour la production\n  const updateProfile = async userData => {\n    try {\n      setError(null);\n      setNotification({\n        message: null,\n        type: null\n      });\n\n      // Éviter le doublon api/api en utilisant le chemin correct\n      const endpoint = '/users/me/';\n      console.log('URL de mise à jour du profil:', axios.defaults.baseURL + endpoint);\n      const res = await axios.put(endpoint, userData);\n      setUser(res.data);\n\n      // Afficher une notification de succès\n      setNotification({\n        message: 'Profil mis à jour avec succès!',\n        type: 'success'\n      });\n      return res.data;\n    } catch (err) {\n      var _err$response3;\n      console.error('Erreur de mise à jour du profil:', err);\n      let message = 'La mise à jour du profil a échoué';\n      if ((_err$response3 = err.response) !== null && _err$response3 !== void 0 && _err$response3.data) {\n        if (typeof err.response.data === 'object') {\n          if (err.response.data.detail) {\n            message = err.response.data.detail;\n          } else {\n            // Simplifier le message d'erreur\n            message = Object.keys(err.response.data).map(key => {\n              const value = err.response.data[key];\n              return `${key}: ${Array.isArray(value) ? value.join(', ') : value}`;\n            }).join(', ');\n          }\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n      throw err;\n    }\n  };\n\n  // Clear errors and notifications\n  const clearNotifications = () => {\n    setError(null);\n    setNotification({\n      message: null,\n      type: null\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      loading,\n      error,\n      notification,\n      register,\n      login,\n      logout,\n      updateProfile,\n      clearNotifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n\n// Export context for use in components\n_s(AuthProvider, \"LC005Ni6swAbgNWStCReOc2kHAA=\");\n_c = AuthProvider;\nAuthContext.displayName = 'AuthContext';\nAuthProvider.context = AuthContext;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","Notification","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","notification","setNotification","message","type","error","setError","checkLoggedIn","token","localStorage","getItem","loadUser","setAuthToken","endpoint","console","log","defaults","baseURL","res","get","data","err","removeItem","headers","common","register","userData","post","username","email","password","password2","bio","alert","window","location","href","_err$response","response","errorMessages","key","value","push","Array","isArray","join","request","login","emailError","setItem","access","profileEndpoint","userRes","_err$response2","detail","logout","updateProfile","put","_err$response3","Object","keys","map","clearNotifications","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","displayName","context","$RefreshReg$"],"sources":["/home/yves/Test/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Notification from '../components/Notification';\n\n// Create context\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [notification, setNotification] = useState({ message: null, type: null });\n  const [error, setError] = useState(null);\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      // Check if token exists in local storage\n      const token = localStorage.getItem('token');\n      \n      if (token) {\n        // Load user data - Version optimisée pour la production\n        const loadUser = async () => {\n          if (localStorage.token) {\n            setAuthToken(localStorage.token);\n          } else {\n            setLoading(false);\n            return; // Pas de token, pas besoin de charger l'utilisateur\n          }\n          \n          try {\n            // Utiliser le chemin correct pour l'API\n            const endpoint = '/users/profile/';\n            \n            console.log('URL du profil:', axios.defaults.baseURL + endpoint);\n            \n            const res = await axios.get(endpoint);\n            setUser(res.data);\n            setIsAuthenticated(true);\n            setLoading(false);\n          } catch (err) {\n            console.error('Erreur de chargement utilisateur:', err);\n            localStorage.removeItem('token'); // Supprimer le token invalide\n            setAuthToken(null);\n            setUser(null);\n            setIsAuthenticated(false);\n            setLoading(false);\n          }\n        };\n        \n        loadUser();\n      } else {\n        setLoading(false);\n      }\n    };\n    \n    checkLoggedIn();\n  }, []);\n\n  // Set auth token for axios\n  const setAuthToken = (token) => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  };\n\n  // Register user - Version simplifiée\n  const register = async (userData) => {\n    try {\n      console.log('Tentative d\\'inscription avec:', userData);\n      \n      // Endpoint d'inscription simplifié\n      // Éviter le doublon api/api en utilisant le chemin correct\n      const endpoint = '/users/register/';\n      \n      console.log('URL d\\'inscription:', axios.defaults.baseURL + endpoint);\n      \n      const res = await axios.post(endpoint, {\n        username: userData.username,\n        email: userData.email,\n        password: userData.password,\n        password2: userData.password2,\n        bio: userData.bio || ''\n      });\n      \n      console.log('Réponse d\\'inscription:', res.data);\n      \n      // Afficher une alerte simple de succès\n      alert('Inscription réussie! Vos données ont été enregistrées dans la base de données. Vous pouvez maintenant vous connecter.');\n      \n      // Rediriger vers la page de connexion immédiatement\n      window.location.href = '/login';\n      \n      return res.data;\n    } catch (err) {\n      console.error('Erreur d\\'inscription:', err);\n      \n      // Message d'erreur simplifié\n      let message = 'L\\'inscription a échoué. Vérifiez votre connexion internet.';\n      \n      if (err.response?.data) {\n        console.log('Données d\\'erreur:', err.response.data);\n        if (typeof err.response.data === 'object') {\n          // Simplifier le message d'erreur\n          const errorMessages = [];\n          for (const key in err.response.data) {\n            const value = err.response.data[key];\n            errorMessages.push(`${key}: ${Array.isArray(value) ? value.join(', ') : value}`);\n          }\n          message = errorMessages.join('\\n');\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n      \n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n    }\n  };\n\n  // Login user - Version simplifiée\n  const login = async (userData) => {\n    try {\n      console.log('Tentative de connexion avec:', userData);\n      \n      // Endpoint de connexion simplifié\n      // Éviter le doublon api/api en utilisant le chemin correct\n      const endpoint = '/token/';\n      \n      console.log('URL de connexion:', axios.defaults.baseURL + endpoint);\n      \n      // Essayer d'abord avec l'email\n      try {\n        console.log('Tentative de connexion avec email');\n        const res = await axios.post(endpoint, {\n          email: userData.email || userData.username,\n          password: userData.password\n        });\n        console.log('Connexion réussie avec email');\n        return res;\n      } catch (emailError) {\n        console.log('Échec de connexion avec email, tentative avec username');\n        // Si ça échoue, essayer avec le nom d'utilisateur\n        const res = await axios.post(endpoint, {\n          username: userData.email || userData.username,\n          password: userData.password\n        });\n        console.log('Connexion réussie avec username');\n        return res;\n      }\n      \n      console.log('Réponse de connexion:', res.data);\n      \n      // Sauvegarder le token dans le stockage local\n      localStorage.setItem('token', res.data.access);\n      \n      // Configurer le token d'authentification pour les futures requêtes\n      setAuthToken(res.data.access);\n      \n      // Charger les données de l'utilisateur\n      const profileEndpoint = '/api/users/profile/';\n      \n      const userRes = await axios.get(profileEndpoint);\n      \n      // Mettre à jour l'état avec les données de l'utilisateur\n      setUser(userRes.data);\n      setIsAuthenticated(true);\n      \n      // Afficher une alerte simple de succès\n      alert('Connexion réussie! Vos données ont été chargées depuis la base de données.');\n      \n      // Rediriger vers la page d'accueil immédiatement\n      window.location.href = '/';\n      \n      return res.data;\n    } catch (err) {\n      console.error('Erreur de connexion:', err);\n      \n      // Message d'erreur simplifié\n      let message = 'Échec de connexion. Vérifiez vos identifiants.';\n      \n      if (err.response?.data) {\n        console.log('Données d\\'erreur:', err.response.data);\n        if (typeof err.response.data === 'object') {\n          if (err.response.data.detail) {\n            message = err.response.data.detail;\n          } else {\n            // Simplifier le message d'erreur\n            const errorMessages = [];\n            for (const key in err.response.data) {\n              const value = err.response.data[key];\n              errorMessages.push(`${key}: ${Array.isArray(value) ? value.join(', ') : value}`);\n            }\n            message = errorMessages.join('\\n');\n          }\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n      \n      // Afficher l'erreur avec une alerte simple\n      alert('Erreur: ' + message);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    // Remove token from local storage\n    localStorage.removeItem('token');\n    \n    // Remove auth token from headers\n    setAuthToken(null);\n    \n    // Reset state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Update user profile - Version optimisée pour la production\n  const updateProfile = async (userData) => {\n    try {\n      setError(null);\n      setNotification({ message: null, type: null });\n      \n      // Éviter le doublon api/api en utilisant le chemin correct\n      const endpoint = '/users/me/';\n      \n      console.log('URL de mise à jour du profil:', axios.defaults.baseURL + endpoint);\n      \n      const res = await axios.put(endpoint, userData);\n      setUser(res.data);\n      \n      // Afficher une notification de succès\n      setNotification({\n        message: 'Profil mis à jour avec succès!',\n        type: 'success'\n      });\n      \n      return res.data;\n    } catch (err) {\n      console.error('Erreur de mise à jour du profil:', err);\n      \n      let message = 'La mise à jour du profil a échoué';\n      \n      if (err.response?.data) {\n        if (typeof err.response.data === 'object') {\n          if (err.response.data.detail) {\n            message = err.response.data.detail;\n          } else {\n            // Simplifier le message d'erreur\n            message = Object.keys(err.response.data)\n              .map(key => {\n                const value = err.response.data[key];\n                return `${key}: ${Array.isArray(value) ? value.join(', ') : value}`;\n              })\n              .join(', ');\n          }\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n      \n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n      \n      throw err;\n    }\n  };\n\n  // Clear errors and notifications\n  const clearNotifications = () => {\n    setError(null);\n    setNotification({ message: null, type: null });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated,\n        loading,\n        error,\n        notification,\n        register,\n        login,\n        logout,\n        updateProfile,\n        clearNotifications\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Export context for use in components\nAuthContext.displayName = 'AuthContext';\nAuthProvider.context = AuthContext;\nexport default AuthContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,4BAA4B;;AAErD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC;IAAEkB,OAAO,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAK,CAAC,CAAC;EAC/E,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMqB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC;MACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3C,IAAIF,KAAK,EAAE;QACT;QACA,MAAMG,QAAQ,GAAG,MAAAA,CAAA,KAAY;UAC3B,IAAIF,YAAY,CAACD,KAAK,EAAE;YACtBI,YAAY,CAACH,YAAY,CAACD,KAAK,CAAC;UAClC,CAAC,MAAM;YACLR,UAAU,CAAC,KAAK,CAAC;YACjB,OAAO,CAAC;UACV;UAEA,IAAI;YACF;YACA,MAAMa,QAAQ,GAAG,iBAAiB;YAElCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE5B,KAAK,CAAC6B,QAAQ,CAACC,OAAO,GAAGJ,QAAQ,CAAC;YAEhE,MAAMK,GAAG,GAAG,MAAM/B,KAAK,CAACgC,GAAG,CAACN,QAAQ,CAAC;YACrCjB,OAAO,CAACsB,GAAG,CAACE,IAAI,CAAC;YACjBtB,kBAAkB,CAAC,IAAI,CAAC;YACxBE,UAAU,CAAC,KAAK,CAAC;UACnB,CAAC,CAAC,OAAOqB,GAAG,EAAE;YACZP,OAAO,CAACT,KAAK,CAAC,mCAAmC,EAAEgB,GAAG,CAAC;YACvDZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YAClCV,YAAY,CAAC,IAAI,CAAC;YAClBhB,OAAO,CAAC,IAAI,CAAC;YACbE,kBAAkB,CAAC,KAAK,CAAC;YACzBE,UAAU,CAAC,KAAK,CAAC;UACnB;QACF,CAAC;QAEDW,QAAQ,CAAC,CAAC;MACZ,CAAC,MAAM;QACLX,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDO,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,YAAY,GAAIJ,KAAK,IAAK;IAC9B,IAAIA,KAAK,EAAE;MACTrB,KAAK,CAAC6B,QAAQ,CAACO,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUhB,KAAK,EAAE;IACpE,CAAC,MAAM;MACL,OAAOrB,KAAK,CAAC6B,QAAQ,CAACO,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACFZ,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEW,QAAQ,CAAC;;MAEvD;MACA;MACA,MAAMb,QAAQ,GAAG,kBAAkB;MAEnCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE5B,KAAK,CAAC6B,QAAQ,CAACC,OAAO,GAAGJ,QAAQ,CAAC;MAErE,MAAMK,GAAG,GAAG,MAAM/B,KAAK,CAACwC,IAAI,CAACd,QAAQ,EAAE;QACrCe,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;QAC3BC,KAAK,EAAEH,QAAQ,CAACG,KAAK;QACrBC,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;QAC3BC,SAAS,EAAEL,QAAQ,CAACK,SAAS;QAC7BC,GAAG,EAAEN,QAAQ,CAACM,GAAG,IAAI;MACvB,CAAC,CAAC;MAEFlB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,GAAG,CAACE,IAAI,CAAC;;MAEhD;MACAa,KAAK,CAAC,uHAAuH,CAAC;;MAE9H;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAE/B,OAAOlB,GAAG,CAACE,IAAI;IACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAgB,aAAA;MACZvB,OAAO,CAACT,KAAK,CAAC,wBAAwB,EAAEgB,GAAG,CAAC;;MAE5C;MACA,IAAIlB,OAAO,GAAG,6DAA6D;MAE3E,KAAAkC,aAAA,GAAIhB,GAAG,CAACiB,QAAQ,cAAAD,aAAA,eAAZA,aAAA,CAAcjB,IAAI,EAAE;QACtBN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEM,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAAC;QACpD,IAAI,OAAOC,GAAG,CAACiB,QAAQ,CAAClB,IAAI,KAAK,QAAQ,EAAE;UACzC;UACA,MAAMmB,aAAa,GAAG,EAAE;UACxB,KAAK,MAAMC,GAAG,IAAInB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,EAAE;YACnC,MAAMqB,KAAK,GAAGpB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAACoB,GAAG,CAAC;YACpCD,aAAa,CAACG,IAAI,CAAC,GAAGF,GAAG,KAAKG,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,GAAGA,KAAK,CAACI,IAAI,CAAC,IAAI,CAAC,GAAGJ,KAAK,EAAE,CAAC;UAClF;UACAtC,OAAO,GAAGoC,aAAa,CAACM,IAAI,CAAC,IAAI,CAAC;QACpC,CAAC,MAAM,IAAI,OAAOxB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,KAAK,QAAQ,EAAE;UAChDjB,OAAO,GAAGkB,GAAG,CAACiB,QAAQ,CAAClB,IAAI;QAC7B;MACF,CAAC,MAAM,IAAIC,GAAG,CAACyB,OAAO,EAAE;QACtB;QACA3C,OAAO,GAAG,mDAAmD;MAC/D,CAAC,MAAM;QACL;QACAA,OAAO,GAAGkB,GAAG,CAAClB,OAAO,IAAI,iBAAiB;MAC5C;MAEAG,QAAQ,CAACH,OAAO,CAAC;MACjBD,eAAe,CAAC;QACdC,OAAO,EAAEA,OAAO;QAChBC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAM2C,KAAK,GAAG,MAAOrB,QAAQ,IAAK;IAChC,IAAI;MACFZ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEW,QAAQ,CAAC;;MAErD;MACA;MACA,MAAMb,QAAQ,GAAG,SAAS;MAE1BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE5B,KAAK,CAAC6B,QAAQ,CAACC,OAAO,GAAGJ,QAAQ,CAAC;;MAEnE;MACA,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChD,MAAMG,GAAG,GAAG,MAAM/B,KAAK,CAACwC,IAAI,CAACd,QAAQ,EAAE;UACrCgB,KAAK,EAAEH,QAAQ,CAACG,KAAK,IAAIH,QAAQ,CAACE,QAAQ;UAC1CE,QAAQ,EAAEJ,QAAQ,CAACI;QACrB,CAAC,CAAC;QACFhB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3C,OAAOG,GAAG;MACZ,CAAC,CAAC,OAAO8B,UAAU,EAAE;QACnBlC,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;QACrE;QACA,MAAMG,GAAG,GAAG,MAAM/B,KAAK,CAACwC,IAAI,CAACd,QAAQ,EAAE;UACrCe,QAAQ,EAAEF,QAAQ,CAACG,KAAK,IAAIH,QAAQ,CAACE,QAAQ;UAC7CE,QAAQ,EAAEJ,QAAQ,CAACI;QACrB,CAAC,CAAC;QACFhB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,OAAOG,GAAG;MACZ;MAEAJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,GAAG,CAACE,IAAI,CAAC;;MAE9C;MACAX,YAAY,CAACwC,OAAO,CAAC,OAAO,EAAE/B,GAAG,CAACE,IAAI,CAAC8B,MAAM,CAAC;;MAE9C;MACAtC,YAAY,CAACM,GAAG,CAACE,IAAI,CAAC8B,MAAM,CAAC;;MAE7B;MACA,MAAMC,eAAe,GAAG,qBAAqB;MAE7C,MAAMC,OAAO,GAAG,MAAMjE,KAAK,CAACgC,GAAG,CAACgC,eAAe,CAAC;;MAEhD;MACAvD,OAAO,CAACwD,OAAO,CAAChC,IAAI,CAAC;MACrBtB,kBAAkB,CAAC,IAAI,CAAC;;MAExB;MACAmC,KAAK,CAAC,4EAA4E,CAAC;;MAEnF;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;MAE1B,OAAOlB,GAAG,CAACE,IAAI;IACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAgC,cAAA;MACZvC,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEgB,GAAG,CAAC;;MAE1C;MACA,IAAIlB,OAAO,GAAG,gDAAgD;MAE9D,KAAAkD,cAAA,GAAIhC,GAAG,CAACiB,QAAQ,cAAAe,cAAA,eAAZA,cAAA,CAAcjC,IAAI,EAAE;QACtBN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEM,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAAC;QACpD,IAAI,OAAOC,GAAG,CAACiB,QAAQ,CAAClB,IAAI,KAAK,QAAQ,EAAE;UACzC,IAAIC,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAACkC,MAAM,EAAE;YAC5BnD,OAAO,GAAGkB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAACkC,MAAM;UACpC,CAAC,MAAM;YACL;YACA,MAAMf,aAAa,GAAG,EAAE;YACxB,KAAK,MAAMC,GAAG,IAAInB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,EAAE;cACnC,MAAMqB,KAAK,GAAGpB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAACoB,GAAG,CAAC;cACpCD,aAAa,CAACG,IAAI,CAAC,GAAGF,GAAG,KAAKG,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,GAAGA,KAAK,CAACI,IAAI,CAAC,IAAI,CAAC,GAAGJ,KAAK,EAAE,CAAC;YAClF;YACAtC,OAAO,GAAGoC,aAAa,CAACM,IAAI,CAAC,IAAI,CAAC;UACpC;QACF,CAAC,MAAM,IAAI,OAAOxB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,KAAK,QAAQ,EAAE;UAChDjB,OAAO,GAAGkB,GAAG,CAACiB,QAAQ,CAAClB,IAAI;QAC7B;MACF,CAAC,MAAM,IAAIC,GAAG,CAACyB,OAAO,EAAE;QACtB;QACA3C,OAAO,GAAG,mDAAmD;MAC/D,CAAC,MAAM;QACL;QACAA,OAAO,GAAGkB,GAAG,CAAClB,OAAO,IAAI,iBAAiB;MAC5C;;MAEA;MACA8B,KAAK,CAAC,UAAU,GAAG9B,OAAO,CAAC;IAC7B;EACF,CAAC;;EAED;EACA,MAAMoD,MAAM,GAAGA,CAAA,KAAM;IACnB;IACA9C,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;;IAEhC;IACAV,YAAY,CAAC,IAAI,CAAC;;IAElB;IACAhB,OAAO,CAAC,IAAI,CAAC;IACbE,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;;EAED;EACA,MAAM0D,aAAa,GAAG,MAAO9B,QAAQ,IAAK;IACxC,IAAI;MACFpB,QAAQ,CAAC,IAAI,CAAC;MACdJ,eAAe,CAAC;QAAEC,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;;MAE9C;MACA,MAAMS,QAAQ,GAAG,YAAY;MAE7BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE5B,KAAK,CAAC6B,QAAQ,CAACC,OAAO,GAAGJ,QAAQ,CAAC;MAE/E,MAAMK,GAAG,GAAG,MAAM/B,KAAK,CAACsE,GAAG,CAAC5C,QAAQ,EAAEa,QAAQ,CAAC;MAC/C9B,OAAO,CAACsB,GAAG,CAACE,IAAI,CAAC;;MAEjB;MACAlB,eAAe,CAAC;QACdC,OAAO,EAAE,gCAAgC;QACzCC,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,OAAOc,GAAG,CAACE,IAAI;IACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAqC,cAAA;MACZ5C,OAAO,CAACT,KAAK,CAAC,kCAAkC,EAAEgB,GAAG,CAAC;MAEtD,IAAIlB,OAAO,GAAG,mCAAmC;MAEjD,KAAAuD,cAAA,GAAIrC,GAAG,CAACiB,QAAQ,cAAAoB,cAAA,eAAZA,cAAA,CAActC,IAAI,EAAE;QACtB,IAAI,OAAOC,GAAG,CAACiB,QAAQ,CAAClB,IAAI,KAAK,QAAQ,EAAE;UACzC,IAAIC,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAACkC,MAAM,EAAE;YAC5BnD,OAAO,GAAGkB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAACkC,MAAM;UACpC,CAAC,MAAM;YACL;YACAnD,OAAO,GAAGwD,MAAM,CAACC,IAAI,CAACvC,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAAC,CACrCyC,GAAG,CAACrB,GAAG,IAAI;cACV,MAAMC,KAAK,GAAGpB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,CAACoB,GAAG,CAAC;cACpC,OAAO,GAAGA,GAAG,KAAKG,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,GAAGA,KAAK,CAACI,IAAI,CAAC,IAAI,CAAC,GAAGJ,KAAK,EAAE;YACrE,CAAC,CAAC,CACDI,IAAI,CAAC,IAAI,CAAC;UACf;QACF,CAAC,MAAM,IAAI,OAAOxB,GAAG,CAACiB,QAAQ,CAAClB,IAAI,KAAK,QAAQ,EAAE;UAChDjB,OAAO,GAAGkB,GAAG,CAACiB,QAAQ,CAAClB,IAAI;QAC7B;MACF,CAAC,MAAM,IAAIC,GAAG,CAACyB,OAAO,EAAE;QACtB;QACA3C,OAAO,GAAG,mDAAmD;MAC/D,CAAC,MAAM;QACL;QACAA,OAAO,GAAGkB,GAAG,CAAClB,OAAO,IAAI,iBAAiB;MAC5C;MAEAG,QAAQ,CAACH,OAAO,CAAC;MACjBD,eAAe,CAAC;QACdC,OAAO,EAAEA,OAAO;QAChBC,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,MAAMiB,GAAG;IACX;EACF,CAAC;;EAED;EACA,MAAMyC,kBAAkB,GAAGA,CAAA,KAAM;IAC/BxD,QAAQ,CAAC,IAAI,CAAC;IACdJ,eAAe,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC;EAChD,CAAC;EAED,oBACEd,OAAA,CAACC,WAAW,CAACwE,QAAQ;IACnBtB,KAAK,EAAE;MACL9C,IAAI;MACJE,eAAe;MACfE,OAAO;MACPM,KAAK;MACLJ,YAAY;MACZwB,QAAQ;MACRsB,KAAK;MACLQ,MAAM;MACNC,aAAa;MACbM;IACF,CAAE;IAAArE,QAAA,EAEDA;EAAQ;IAAAuE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAzE,EAAA,CA1TaF,YAAY;AAAA4E,EAAA,GAAZ5E,YAAY;AA2TzBD,WAAW,CAAC8E,WAAW,GAAG,aAAa;AACvC7E,YAAY,CAAC8E,OAAO,GAAG/E,WAAW;AAClC,eAAeA,WAAW;AAAC,IAAA6E,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
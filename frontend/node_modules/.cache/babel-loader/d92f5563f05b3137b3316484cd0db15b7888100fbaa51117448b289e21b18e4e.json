{"ast":null,"code":"var _jsxFileName = \"/home/yves/Test/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Notification from '../components/Notification';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [notification, setNotification] = useState({\n    message: null,\n    type: null\n  });\n  const [error, setError] = useState(null);\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      // Check if token exists in local storage\n      const token = localStorage.getItem('token');\n      if (token) {\n        // Load user data - Version optimisée pour la production\n        const loadUser = async () => {\n          if (localStorage.token) {\n            setAuthToken(localStorage.token);\n          } else {\n            setLoading(false);\n            return; // Pas de token, pas besoin de charger l'utilisateur\n          }\n          try {\n            // Utiliser le chemin complet pour l'API en production\n            const endpoint = process.env.NODE_ENV === 'production' ? '/api/users/profile/' : '/users/profile/';\n            const res = await axios.get(endpoint);\n            setUser(res.data);\n            setIsAuthenticated(true);\n            setLoading(false);\n          } catch (err) {\n            // Supprimer le token invalide\n            localStorage.removeItem('token');\n            setAuthToken(null);\n            setUser(null);\n            setIsAuthenticated(false);\n            setLoading(false);\n\n            // Afficher une notification d'erreur\n            setNotification({\n              message: 'Session expirée. Veuillez vous reconnecter.',\n              type: 'error'\n            });\n          }\n        };\n        loadUser();\n      } else {\n        setLoading(false);\n      }\n    };\n    checkLoggedIn();\n  }, []);\n\n  // Set auth token for axios\n  const setAuthToken = token => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  };\n\n  // Register user - Version optimisée pour la production\n  const register = async userData => {\n    try {\n      setError(null);\n      setNotification({\n        message: null,\n        type: null\n      });\n      setLoading(true);\n\n      // Utiliser le chemin complet pour l'API\n      const endpoint = '/api/users/register/';\n      const res = await axios.post(endpoint, {\n        username: userData.username,\n        email: userData.email,\n        password: userData.password,\n        password2: userData.password2,\n        bio: userData.bio || ''\n      });\n\n      // Afficher une notification de succès\n      setNotification({\n        message: 'Inscription réussie! Vous êtes redirigé vers la page de connexion.',\n        type: 'success'\n      });\n      setLoading(false);\n\n      // Redirection vers la page de connexion\n      setTimeout(() => {\n        window.location.href = '/login';\n      }, 1500); // Délai pour que l'utilisateur puisse voir la notification\n\n      return res.data;\n    } catch (err) {\n      let message = 'L\\'inscription a échoué. Vérifiez votre connexion internet.';\n      if (err.response) {\n        if (typeof err.response.data === 'object') {\n          // Simplifier le message d'erreur\n          message = Object.keys(err.response.data).map(key => {\n            const value = err.response.data[key];\n            return `${key}: ${Array.isArray(value) ? value.join(', ') : value}`;\n          }).join(', ');\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n    }\n  };\n\n  // Login user - Version simplifiée\n  const login = async userData => {\n    try {\n      setError(null);\n      setNotification({\n        message: null,\n        type: null\n      });\n      setLoading(true); // Indiquer que le chargement est en cours\n\n      // Utiliser le chemin correct pour l'API\n      const endpoint = '/api/token/';\n\n      // Préparer les données d'authentification\n      // Le backend utilise email comme USERNAME_FIELD\n      const authData = {\n        email: userData.email,\n        password: userData.password\n      };\n\n      // Effectuer la requête d'authentification\n      const res = await axios.post(endpoint, authData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Sauvegarder le token et configurer l'authentification\n      localStorage.setItem('token', res.data.access);\n      setAuthToken(res.data.access);\n\n      // Charger les données utilisateur\n      const profileEndpoint = '/api/users/profile/';\n      const userRes = await axios.get(profileEndpoint);\n\n      // Mettre à jour l'état\n      setUser(userRes.data);\n      setIsAuthenticated(true);\n\n      // Afficher une notification de succès\n      setNotification({\n        message: 'Connexion réussie!',\n        type: 'success'\n      });\n\n      // Terminer le chargement\n      setLoading(false);\n      return res.data;\n    } catch (err) {\n      let message = 'Échec de connexion. Vérifiez vos identifiants.';\n      if (err.response) {\n        if (typeof err.response.data === 'object') {\n          if (err.response.data.detail) {\n            message = err.response.data.detail;\n          } else {\n            // Simplifier le message d'erreur\n            message = Object.keys(err.response.data).map(key => {\n              const value = err.response.data[key];\n              return `${key}: ${Array.isArray(value) ? value.join(', ') : value}`;\n            }).join(', ');\n          }\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n\n      // Réinitialiser l'état de chargement en cas d'erreur\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    // Remove token from local storage\n    localStorage.removeItem('token');\n\n    // Remove auth token from headers\n    setAuthToken(null);\n\n    // Reset state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Update user profile\n  const updateProfile = async userData => {\n    try {\n      setError(null);\n      setNotification({\n        message: null,\n        type: null\n      });\n      setLoading(true);\n\n      // Utiliser le chemin correct pour l'API\n      const endpoint = process.env.NODE_ENV === 'production' ? '/api/users/me/' : '/users/me/';\n      const res = await axios.put(endpoint, userData);\n      setUser(res.data);\n\n      // Afficher une notification de succès\n      setNotification({\n        message: 'Profil mis à jour avec succès!',\n        type: 'success'\n      });\n      setLoading(false);\n      return res.data;\n    } catch (err) {\n      let message = 'La mise à jour du profil a échoué.';\n      if (err.response && err.response.data) {\n        if (err.response.data.detail) {\n          message = err.response.data.detail;\n        } else if (typeof err.response.data === 'object') {\n          // Simplifier le message d'erreur\n          message = Object.keys(err.response.data).map(key => {\n            const value = err.response.data[key];\n            return `${key}: ${Array.isArray(value) ? value.join(', ') : value}`;\n          }).join(', ');\n        }\n      }\n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Clear errors and notifications\n  const clearNotifications = () => {\n    setError(null);\n    setNotification({\n      message: null,\n      type: null\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      loading,\n      error,\n      notification,\n      register,\n      login,\n      logout,\n      updateProfile,\n      clearNotifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n\n// Export context for use in components\n_s(AuthProvider, \"LC005Ni6swAbgNWStCReOc2kHAA=\");\n_c = AuthProvider;\nAuthContext.displayName = 'AuthContext';\nAuthProvider.context = AuthContext;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","Notification","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","notification","setNotification","message","type","error","setError","checkLoggedIn","token","localStorage","getItem","loadUser","setAuthToken","endpoint","process","env","NODE_ENV","res","get","data","err","removeItem","defaults","headers","common","register","userData","post","username","email","password","password2","bio","setTimeout","window","location","href","response","Object","keys","map","key","value","Array","isArray","join","request","login","authData","setItem","access","profileEndpoint","userRes","detail","logout","updateProfile","put","clearNotifications","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","displayName","context","$RefreshReg$"],"sources":["/home/yves/Test/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Notification from '../components/Notification';\n\n// Create context\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [notification, setNotification] = useState({ message: null, type: null });\n  const [error, setError] = useState(null);\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      // Check if token exists in local storage\n      const token = localStorage.getItem('token');\n      \n      if (token) {\n        // Load user data - Version optimisée pour la production\n        const loadUser = async () => {\n          if (localStorage.token) {\n            setAuthToken(localStorage.token);\n          } else {\n            setLoading(false);\n            return; // Pas de token, pas besoin de charger l'utilisateur\n          }\n          \n          try {\n            // Utiliser le chemin complet pour l'API en production\n            const endpoint = process.env.NODE_ENV === 'production' \n              ? '/api/users/profile/' \n              : '/users/profile/';\n            \n            const res = await axios.get(endpoint);\n            setUser(res.data);\n            setIsAuthenticated(true);\n            setLoading(false);\n          } catch (err) {\n            // Supprimer le token invalide\n            localStorage.removeItem('token'); \n            setAuthToken(null);\n            setUser(null);\n            setIsAuthenticated(false);\n            setLoading(false);\n            \n            // Afficher une notification d'erreur\n            setNotification({\n              message: 'Session expirée. Veuillez vous reconnecter.',\n              type: 'error'\n            });\n          }\n        };\n        \n        loadUser();\n      } else {\n        setLoading(false);\n      }\n    };\n    \n    checkLoggedIn();\n  }, []);\n\n  // Set auth token for axios\n  const setAuthToken = (token) => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  };\n\n  // Register user - Version optimisée pour la production\n  const register = async (userData) => {\n    try {\n      setError(null);\n      setNotification({ message: null, type: null });\n      setLoading(true);\n      \n      // Utiliser le chemin complet pour l'API\n      const endpoint = '/api/users/register/';\n      \n      const res = await axios.post(endpoint, {\n        username: userData.username,\n        email: userData.email,\n        password: userData.password,\n        password2: userData.password2,\n        bio: userData.bio || ''\n      });\n      \n      // Afficher une notification de succès\n      setNotification({\n        message: 'Inscription réussie! Vous êtes redirigé vers la page de connexion.',\n        type: 'success'\n      });\n      \n      setLoading(false);\n      \n      // Redirection vers la page de connexion\n      setTimeout(() => {\n        window.location.href = '/login';\n      }, 1500); // Délai pour que l'utilisateur puisse voir la notification\n      \n      return res.data;\n    } catch (err) {\n      let message = 'L\\'inscription a échoué. Vérifiez votre connexion internet.';\n      \n      if (err.response) {\n        if (typeof err.response.data === 'object') {\n          // Simplifier le message d'erreur\n          message = Object.keys(err.response.data)\n            .map(key => {\n              const value = err.response.data[key];\n              return `${key}: ${Array.isArray(value) ? value.join(', ') : value}`;\n            })\n            .join(', ');\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n      \n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n    }\n  };\n\n  // Login user - Version simplifiée\n  const login = async (userData) => {\n    try {\n      setError(null);\n      setNotification({ message: null, type: null });\n      setLoading(true); // Indiquer que le chargement est en cours\n      \n      // Utiliser le chemin correct pour l'API\n      const endpoint = '/api/token/';\n      \n      // Préparer les données d'authentification\n      // Le backend utilise email comme USERNAME_FIELD\n      const authData = {\n        email: userData.email,\n        password: userData.password\n      };\n      \n      // Effectuer la requête d'authentification\n      const res = await axios.post(endpoint, authData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      // Sauvegarder le token et configurer l'authentification\n      localStorage.setItem('token', res.data.access);\n      setAuthToken(res.data.access);\n      \n      // Charger les données utilisateur\n      const profileEndpoint = '/api/users/profile/';\n      const userRes = await axios.get(profileEndpoint);\n      \n      // Mettre à jour l'état\n      setUser(userRes.data);\n      setIsAuthenticated(true);\n      \n      // Afficher une notification de succès\n      setNotification({\n        message: 'Connexion réussie!',\n        type: 'success'\n      });\n      \n      // Terminer le chargement\n      setLoading(false);\n      \n      return res.data;\n    } catch (err) {\n      let message = 'Échec de connexion. Vérifiez vos identifiants.';\n      \n      if (err.response) {\n        if (typeof err.response.data === 'object') {\n          if (err.response.data.detail) {\n            message = err.response.data.detail;\n          } else {\n            // Simplifier le message d'erreur\n            message = Object.keys(err.response.data)\n              .map(key => {\n                const value = err.response.data[key];\n                return `${key}: ${Array.isArray(value) ? value.join(', ') : value}`;\n              })\n              .join(', ');\n          }\n        } else if (typeof err.response.data === 'string') {\n          message = err.response.data;\n        }\n      } else if (err.request) {\n        // La requête a été faite mais pas de réponse\n        message = 'Erreur réseau: Impossible de contacter le serveur';\n      } else {\n        // Erreur lors de la configuration de la requête\n        message = err.message || 'Erreur inconnue';\n      }\n      \n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n      \n      // Réinitialiser l'état de chargement en cas d'erreur\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    // Remove token from local storage\n    localStorage.removeItem('token');\n    \n    // Remove auth token from headers\n    setAuthToken(null);\n    \n    // Reset state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Update user profile\n  const updateProfile = async (userData) => {\n    try {\n      setError(null);\n      setNotification({ message: null, type: null });\n      setLoading(true);\n      \n      // Utiliser le chemin correct pour l'API\n      const endpoint = process.env.NODE_ENV === 'production' \n        ? '/api/users/me/' \n        : '/users/me/';\n      \n      const res = await axios.put(endpoint, userData);\n      setUser(res.data);\n      \n      // Afficher une notification de succès\n      setNotification({\n        message: 'Profil mis à jour avec succès!',\n        type: 'success'\n      });\n      \n      setLoading(false);\n      return res.data;\n    } catch (err) {\n      let message = 'La mise à jour du profil a échoué.';\n      \n      if (err.response && err.response.data) {\n        if (err.response.data.detail) {\n          message = err.response.data.detail;\n        } else if (typeof err.response.data === 'object') {\n          // Simplifier le message d'erreur\n          message = Object.keys(err.response.data)\n            .map(key => {\n              const value = err.response.data[key];\n              return `${key}: ${Array.isArray(value) ? value.join(', ') : value}`;\n            })\n            .join(', ');\n        }\n      }\n      \n      setError(message);\n      setNotification({\n        message: message,\n        type: 'error'\n      });\n      \n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Clear errors and notifications\n  const clearNotifications = () => {\n    setError(null);\n    setNotification({ message: null, type: null });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated,\n        loading,\n        error,\n        notification,\n        register,\n        login,\n        logout,\n        updateProfile,\n        clearNotifications\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Export context for use in components\nAuthContext.displayName = 'AuthContext';\nAuthProvider.context = AuthContext;\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}